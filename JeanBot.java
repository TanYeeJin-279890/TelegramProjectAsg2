package my.uum;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

/**
 * This class is to extend TelegramLongPollingBot, implement method for bot username and bot token, and control the auto messaging
 *
 * @author Tan Yee Jin (279890)
 */
public class JeanBot extends TelegramLongPollingBot {
    static String icno,id,name,ph,email,reason,date,roomid,time;

    /**
     * This method is for returning bot username.
     * Being used to return bot name that first create in FatherBot.
     * Bot Username is being created in order to make the account becomes reachable by the global search.
     */
    @Override
    public String getBotUsername() {
        // Return bot username
        // If bot username is @MyAmazingBot, it must return 'MyAmazingBot'
        return "s279890_A221_bot";
    }

    /**
     * This method is to always return bot token.
     * Being used to return bot token that uniquely generated by FatherBot.
     * Bot token is being created in order to get detected by telegram for authenticate request.
     */
    @Override
    public String getBotToken() {
        // Return bot token from BotFather
        return "5859805944:AAF-PaDp_vFfFEdv112HIL_LHgWVpm9XfJc";
    }

    /**
     * This method will just read messages and user input, then echo the reply for the input
     */
    @Override
    public void onUpdateReceived(Update update) {
        DatabaseSQLite sql = new DatabaseSQLite();
        SendMessage sendMessage;
        Message msg;

        if (update.hasMessage()) {
            //Message(messageId=657, from=User(id=608814733, firstName=Tan Yee Jin, isBot=false, lastName=279890, userName=TanYeeJin279890, languageCode=en, canJoinGroups=null, canReadAllGroupMessages=null, supportInlineQueries=null), date=1670634843, chat=Chat(id=608814733, type=private, title=null, firstName=Tan Yee Jin, lastName=279890, userName=TanYeeJin279890, photo=null, description=null, inviteLink=null, pinnedMessage=null, stickerSetName=null, canSetStickerSet=null, permissions=null, slowModeDelay=null, bio=null, linkedChatId=null, location=null, messageAutoDeleteTime=null, hasPrivateForwards=null, HasProtectedContent=null), forwardFrom=null, forwardFromChat=null, forwardDate=null, text=/start, entities=[MessageEntity(type=bot_command, offset=0, length=6, url=null, user=null, language=null, text=/start)], captionEntities=null, audio=null, document=null, photo=null, sticker=null, video=null, contact=null, location=null, venue=null, animation=null, pinnedMessage=null, newChatMembers=[], leftChatMember=null, newChatTitle=null, newChatPhoto=null, deleteChatPhoto=null, groupchatCreated=null, replyToMessage=null, voice=null, caption=null, superGroupCreated=null, channelChatCreated=null, migrateToChatId=null, migrateFromChatId=null, editDate=null, game=null, forwardFromMessageId=null, invoice=null, successfulPayment=null, videoNote=null, authorSignature=null, forwardSignature=null, mediaGroupId=null, connectedWebsite=null, passportData=null, forwardSenderName=null, poll=null, replyMarkup=null, dice=null, viaBot=null, senderChat=null, proximityAlertTriggered=null, messageAutoDeleteTimerChanged=null, isAutomaticForward=null, hasProtectedContent=null, webAppData=null, videoChatStarted=null, videoChatEnded=null, videoChatParticipantsInvited=null, videoChatScheduled=null)
            msg = update.getMessage();
            String[] data = msg.getText().split("_",5);
            //String[] enter = msg.getText().split("-",5);
            String chat_id = update.getMessage().getChatId().toString();

            switch (data[0]) {
                case "/start":
                    String about = "Welcome to Meeting Booking System!!!"
                            + "\nClick /book to proceed booking"
                            + "\n\nClick /cancel for cancel previous booking"
                            + "\n\nClick /check to check previous and recent booking"
                            + "\n\nClick /showlist to check previous and recent booking"
                            + "\n\nClick /end link to end booking.";
                    sendMessage = new SendMessage();
                    sendMessage.setText(about);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());

                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/check":
                    String search = "Please enter your staffID.(Format: ID_xxxxx)";
                    sendMessage = new SendMessage();
                    sendMessage.setText(search);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/cancel":
                    String cancel = "We feel sorry to hear that and we hope to provide our service again."+
                            "\nIf you have confirm to cancel the booking,\t"+
                            "Please enter your staffID.(Format: c_xxxxx)";
                    sendMessage = new SendMessage();
                    sendMessage.setText(cancel);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "c":
                    id = data[1];
                    chat_id = update.getMessage().getChatId().toString();
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setText("Cancelling the booking......."+
                    "\n\n"+sql.cancelBook(id));
                    System.out.println("Cancel booking for "+id);
                    sql.deleteUser(id);
                    sql.updateCancel(id);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/showlist":
                    sendMessage = new SendMessage();
                    sendMessage.setText(sql.displayList());
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "ID":
                    id = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for staff ID.Please enter again your ID number.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("**** Retrieving Booking Record ****\n"+sql.checkUser(id)
                                +"\n\nPlease click /end to end the sesion."
                                +"\n\nPlease click /cancel to cancel your previous booking."
                                +"\n\nPlease click /book to start your book.");
                        System.out.println(id);
                        id=data[1];
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/book":
                    String getInfo = "Personal Data for Booking process will be needed." +
                            "\nPlease make sure data should be (as per NRIC/PASSPORT)" +
                            "\nFill in I/C number.(Format: ic_xxxxx)"
                            + "\n\nClick /end link to end booking.";
                    sendMessage = new SendMessage();
                    sendMessage.setText(getInfo);
                    sendMessage.setChatId(msg.getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "ic":
                    icno = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for I/C number.Please enter again your I/C number.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Your IC is " + icno + "\nGreat, now let's continue with filling in your ID.(Format: id_xxxxx)");
                        System.out.println(icno);
                        icno=data[1];
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                    case "id":
                    id = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for staff ID.Please enter again your ID number.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Your staff ID is " + id +"\nNow continue with filling"+" in your name please.(Format: n_xxxxx)");
                        System.out.println(id);
                        id=data[1];
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "n":
                    name = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for name.Please enter again your name.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Your name is " + name +"\nNow continue with filling"+
                                " in your email please.(Format: e_xxxxx)");
                        System.out.println(name);
                        name=data[1];
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "e":
                    email = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for email.Please enter again your email.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Your email is " + email +"\nNow continue with filling"+
                                " in your contact please.(Format: ph_xxxxx)");
                        System.out.println(email);
                        email=data[1];
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "ph":
                    ph = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for phone.Please enter again your phone number.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Your contact is " + ph +"\n\nClick /checkData to check back your personal data is correct.");
                        System.out.println(ph);
                        ph=data[1];
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/checkData":
                    String personalData = "Personal Data:"
                            +"\n\nName  : "+name
                            +"\nI/C no  : "+icno
                            +"\nID      : "+id
                            +"\nContact : "+ph
                            +"\n\nClick /continue to proceed the booking process."
                            +"\nClick /book to edit personal data";
                    sendMessage = new SendMessage();
                    sendMessage.setText(personalData);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/continue":
                    String action = "Well Done!!"+"\nNow, let's continue by selecting the reason."
                            +"\n/r1 Meeting"
                            +"\n/r2 Group Study"
                            +"\n/r3 Party"
                            +"\n/r4 Event"
                            +"\n/other"
                            +"\n\nGuidelines: You may click the link /r1 for booking reason is Meeting.";
                    sendMessage = new SendMessage();
                    sendMessage.setText(action);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;

                    //reason booking
                case "/r1":
                    reason = "Meeting";
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Reason Booking is " + reason
                            +"\n\nGreat Job, you are almost there."
                            +"\nNow, please continue by clicking /display");
                    sql.insertData(icno,id,name,ph,email,reason);
                    System.out.println(icno+","+id+","+name+","+ph+","+email+","+reason);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/r2":
                    reason = "Group Study";
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Reason Booking is " + reason
                            +"\n\nGreat Job, you are almost there."
                            +"\nNow, please continue by clicking /display");
                    sql.insertData(icno,id,name,ph,email,reason);
                    System.out.println(icno+","+id+","+name+","+ph+","+email+","+reason);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/r3":
                    reason = "Party";
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Reason Booking is " + reason
                            +"\n\nGreat Job, you are almost there."+
                            "\nNow, please continue by clicking /display");
                    sql.insertData(icno,id,name,ph,email,reason);
                    System.out.println(icno+","+id+","+name+","+ph+","+email+","+reason);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/r4":
                    reason = "Event";
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Reason Booking is " + reason
                            +"\n\nGreat Job, you are almost there."+
                            "\nNow, please continue by clicking /display");
                    sql.insertData(icno,id,name,ph,email,reason);
                    System.out.println(icno+","+id+","+name+","+ph+","+email+","+reason);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/other":
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Please state your reason. (Format: r_xxxxx)");
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "r":
                    reason = data[1];
                    sendMessage = new SendMessage();
                    if(data[1]==""){
                        sendMessage.setChatId(chat_id);
                        sendMessage.setText("Opps!! no information for reason.Please enter again your reason of booking.");
                    }else {
                        sendMessage.setChatId(chat_id);
                        String text = "Reason Booking is \" + reason\n" +
                                "\n\nGreat Job, you are almost there." +
                                "\nNow, please continue by clicking /display";
                        sendMessage.setText(text);
                        reason=data[1];
                        sql.insertData(icno,id,name,ph,email,reason);
                    }
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "D":
                    date = data[1];
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Booking Date: " + date
                            +"\n\nGreat! You are almost there."
                            +"\n"+"All of the available Meeting Room has been displayed below.\n\n"
                            +"Room ID\t\tCapacity\n"
                            + sql.getRoom(date)
                            + "\nPlease enter the room ID to book."
                            +"Format (rID_xxxxxxx).");
                    System.out.println(date);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/display":
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Great! You are almost there."
                            + "\nPlease be aware that meeting room is only available at the date below: \n"
                            +"Room ID\t\t\tCapacity\t\t\t\t\tAvailable Date\n"
                            + sql.getDate()
                            + "\n\nPlease enter the booking date according to the format.(Format: D_dd/MM/YYYY)");
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "rID":
                    roomid = data[1];
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Room Description for "+roomid+"\n\n"
                                        +sql.getRoomDesc(roomid,date)
                                        +"\nDo you want to proceed with this Meeting Room "+roomid
                                        +"\n\nIf you satisfied with the room, click /Show , to show the time slot please"
                                        +"\n\nIf you interested to seek for another room, click /display ");
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/Show":
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Time Slot available for Room ID: "+roomid + sql.getTimeSlot(roomid,date)
                            +"\n\nYou may enter the time slot you want.Format (time_00:00)"
                            +"\tor to check back click /display");
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "time":
                    time = data[1];
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("----------------Booking----------------" +
                            "\nRoomID : "+roomid
                            +"\nTime Slot: "+time
                            +"\n\nAre you sure to proceed with this room?"
                            +"\n/Yes, I am sure"
                            +"\n/No, I would like to check back");
                    sql.updateStatus(id,roomid,date,time);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/Yes":
                    String confirm = "Meeting Room Booked!"
                            +"\n\nName  : "+name
                            +"\nI/C no  : "+icno
                            +"\nID      : "+id
                            +"\nContact : "+ph
                            +"\nRoom Booked : "+roomid
                            +"\nDateTime : "+date+"\t("+time+")"
                            +"\n\nClick /book to proceed with another booking."
                            +"\n\nClick /end link to end booking.";
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sql.updateStatus(roomid,date,time,id);
                    sql.insertBook(roomid,id,date,time);
                    sendMessage.setText(confirm);
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/No":
                    sendMessage = new SendMessage();
                    sendMessage.setChatId(chat_id);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    sendMessage.setText("Click /Show me the time slot please");
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;

                    //end session
                case "/end":
                    String endSession = "Thank you for visiting. Have A Nice Day!";
                    sendMessage = new SendMessage();
                    sendMessage.setText(endSession);
                    sendMessage.setChatId(update.getMessage().getChatId().toString());
                    try {
                        execute(sendMessage); // Call method to send the message
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
            }
        }
    }
}

